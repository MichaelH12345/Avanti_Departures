<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Background Iframe</title>
    <style>
        @font-face {
            font-family: 'AvertaBold';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/AvertaBold-_1_.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Averta';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/Averta-_1_.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Thin Averta';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/averta_bigfontsite.com.otf') format('opentype');
            font-weight: normal;
            font-style: normal;
        }
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        body {
            background-color: #141d2c; /* Background color of the whole page */
        }
        .background {
            position: fixed;
            top: 15px; /* 15 pixels from the top */
            left: 30px; /* 30 pixels from the left */
            z-index: -1;
        }
        .background img {
            width: 50px; /* 50% smaller width */
            height: auto; /* Maintain aspect ratio */
        }
        .iframe-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1;
        }
        .iframe-container iframe {
            width: 1080px;
            height: 1920px;
            border: none;
        }
        .text-box {
            position: fixed; /* Change from absolute to fixed */
            left: 60px; /* Start 60 pixels from the very left */
            top: 7.5px; /* 10 pixels from the very top */
            font-family: 'AvertaBold', sans-serif; /* Specify the font */
            font-size: 70px; /* Text size */
            color: white;
            height: auto; /* Set height to auto initially */
        }
        .time {
            position: absolute;
            left: 30px; /* Start 30 pixels from the very left */
            top: 100px; /* 100 pixels from the very top */
            font-family: 'Averta', sans-serif; /* Specify the font */
            font-size: 35px; /* Text size */
            color: white;
            white-space: nowrap; /* Prevent wrapping */
            width: calc(100% - 30px); /* Stretch across to the very right */
        }
        .time div {
            display: inline-block;
            padding-right: 50px; /* Adjust the spacing between words */
        }
        .line {
            position: absolute;
            top: 155px; /* 10 pixels underneath the 'time' text box */
            left: 0; /* Start from the very left */
            width: 100%; /* Stretch across the entire width */
            height: 2px; /* Medium thickness */
            background-color: #FF4713; /* Orange color */
        }
        .live-train-services {
            position: absolute;
            top: 160px; /* Adjust based on your layout */
            left: 0;
            width: 100%;
            padding: 20px;
            color: white;
            font-family: 'Averta', sans-serif;
            font-size: 50px; /* Adjusted text size */
        }
        .live-train-services ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .live-train-services li {
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 2px solid white;
            display: flex; /* Use flexbox */
            justify-content: flex-start; /* Align items to the start */
            align-items: center; /* Align items vertically */
            flex-wrap: wrap; /* Allow wrapping */
        }
        .live-train-services li div {
            flex: 1; /* Make each div take equal space */
            padding: 0 20px; /* Add padding */
            text-align: left; /* Align text to the left */
        }
        .orange-box {
            position: absolute;
            bottom: 0; /* Start at the very bottom */
            left: 0; /* Align with the left side of the iframe */
            height: 75px; /* Set the height to 50 pixels */
            width: 100%; /* Make it span the entire width of the iframe */
            background-color: #FF4713; /* Change the background color */
        }
    </style>
</head>
<body>
    <div class="background">
        <!-- Image with 15 pixels from the top and 30 pixels from the left -->
        <img id="image" src="https://raw.githubusercontent.com/MichaelH12345/fonts/main/download%20(1).png" alt="Image" onload="updateTextBoxPosition()">
    </div>
    <div class="text-box">Departures</div>
    <div class="time">
        <div>Time</div>
        <div style="padding-left: 35px;">Destination</div>
        <div style="padding-left: 225px;">Platform</div>
        <div style="padding-left: 75px;">Status</div>
        <div style="padding-left: 0px;">Facilities & Reservations</div>
    </div>

    <div class="line"></div>
    
    <!-- Live train services section -->
    <div class="live-train-services" id="liveTrainServices">
        <ul id="liveTrainList"></ul>
    </div>

    <div class="iframe-container">
        <!-- Iframe containing the image -->
        <iframe src="https://raw.githubusercontent.com/MichaelH12345/fonts/main/download%20(1).png"></iframe>
    </div>
    <div class="orange-box"></div>
    <div class="alert-text" id="scrollingText"></div>

    <script>
        async function fetchAndDisplayLiveTrainServices() {
            try {
                const response = await fetch('https://national-rail-api.davwheat.dev/staffdepartures/CAR?expand=true');
                const data = await response.json();
                const trainServices = data.trainServices;

                const liveTrainList = document.getElementById('liveTrainList');
                liveTrainList.innerHTML = ''; // Clear existing data

                if (trainServices.length === 0) {
                    // If no live train services available
                    liveTrainList.innerHTML = "<li>No live train services available.</li>";
                } else {
                    // Generate and append live train service list items
                    trainServices.forEach(service => {
                        const listItem = document.createElement('li');
                        const destination = service.destination[0].locationName;
                        const platform = service.platform || '-';
                        const operator = service.operator ? service.operator : '-';

                        // Extracting time from std and etd fields
                        const std = service.std ? formatDepartureTime(service.std) : '-';
                        const etd = service.etd ? formatDepartureTime(service.etd) : '-';

                        // Determine status based on etd
                        let status = etd === '00:00' ? 'Delayed' : (std === etd ? 'On Time' : etd);

                        // Determine color based on cancellation status
                        const color = service.isCancelled ? '#FF4713' : 'white'; 

                        listItem.innerHTML = `
                            <div>${std}</div>
                            <div style="padding-left: 35px;">${destination}</div>
                            <div style="padding-left: 225px;">${platform}</div>
                            <div style="padding-left: 75px;">${status}</div>
                            <div style="padding-left: 0px;">${operator}</div>
                        `;

                        // Set text color based on cancellation status
                        listItem.style.color = color; 
                        liveTrainList.appendChild(listItem);
                    });
                }
            } catch (error) {
                console.error('Error fetching live train services:', error);
            }
        }

        function updateTextBoxPosition() {
            var imageLeft = document.querySelector('.background').offsetLeft;
            document.querySelector('.text-box').style.left = (imageLeft + 60) + 'px';
        }

        // Function to format departure time
        function formatDepartureTime(timeString) {
            return timeString.slice(11, 16);
        }

        // Fetch and display live train services on page load
        window.onload = function() {
            fetchAndDisplayLiveTrainServices();
        };
    </script>
</body>
</html>
